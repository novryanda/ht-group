// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  // Ensure Prisma generates the appropriate Query Engine for Vercel's runtime
  // Add the Vercel Linux runtime target so the native Node-API library is bundled.
  // "native" keeps local dev behaviour; add other targets if you deploy to other platforms.
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  // Use the Node-API library engine (libquery_engine-*.so.node). This is the
  // recommended engine for serverless deployments on Vercel.
  engineType = "library"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ERP Core Models

enum UserRole {
  GROUP_VIEWER
  EXECUTIVE
  PT_MANAGER
  PT_NILO_ADMIN
  PT_ZTA_ADMIN
  PT_TAM_ADMIN
  PT_HTK_ADMIN
  PT_PKS_ADMIN
  UNIT_SUPERVISOR
  TECHNICIAN
  OPERATOR
  HR
  FINANCE_AR
  FINANCE_AP
  GL_ACCOUNTANT
}

enum SupplierType {
  RAMP_PERON
  KUD
  KELOMPOK_TANI
}

enum PajakPKP {
  PKP_11_PERSEN // 11%
  PKP_1_1_PERSEN // 1.1%
  NON_PKP // Non PKP
}

enum FamilyRelation {
  ISTRI
  ANAK
}

enum BuyerType {
  COMPANY
  PERSON
}

enum PkpStatus {
  NON_PKP
  PKP_11
  PKP_1_1
}

enum BuyerStatus {
  DRAFT
  VERIFIED
  INACTIVE
}

enum TransporterType {
  PERUSAHAAN
  PERORANGAN
}

enum RecordStatus {
  AKTIF
  NONAKTIF
}

enum AccountClass {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  COGS
  EXPENSE
  OTHER_INCOME
  OTHER_EXPENSE
}

enum NormalSide {
  DEBIT
  CREDIT
}

enum TaxCode {
  NON_TAX
  PPN_MASUKAN
  PPN_KELUARAN
  PPH21
  PPH22
  PPH23
}

enum SystemAccountKey {
  TBS_PURCHASE
  INVENTORY_TBS
  AP_SUPPLIER_TBS
  UNLOADING_EXPENSE_SPTI
  UNLOADING_EXPENSE_SPLO
  SALES_CPO
  SALES_KERNEL
  INVENTORY_CPO
  INVENTORY_KERNEL
  COGS_CPO
  COGS_KERNEL
  CASH_DEFAULT
  BANK_DEFAULT
  PPN_KELUARAN
  PPN_MASUKAN
  PPH22_DEFAULT
  PPH23_DEFAULT
}

// Company Model
model Company {
  id        String     @id @default(cuid())
  code      String?    @unique // Company code for identification (e.g., "HTK", "NILO", etc.) - temporarily optional
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]
  accounts  Account[]
  systemAccountMaps SystemAccountMap[]
  fiscalPeriods FiscalPeriod[]
  openingBalances OpeningBalance[]
}

// Employee Model (maps to karyawan table)
model Employee {
  id_karyawan           String    @id @default(cuid())
  nama                  String?   @db.VarChar(100)
  status_kk             String?   @db.VarChar(50) // status dalam KK
  jenis_kelamin         String?   @db.Char(1) // L / P
  agama                 String?   @db.VarChar(30)
  suku                  String?   @db.VarChar(50)
  golongan_darah        String?   @db.VarChar(5)
  no_telp_hp            String?   @db.VarChar(20)
  tempat_lahir          String?   @db.VarChar(50)
  tanggal_lahir         DateTime?
  umur                  Int?
  alamat_rt_rw          String?   @db.VarChar(20)
  alamat_desa           String?   @db.VarChar(100)
  alamat_kecamatan      String?   @db.VarChar(100)
  alamat_kabupaten      String?   @db.VarChar(100)
  alamat_provinsi       String?   @db.VarChar(100)
  pendidikan_terakhir   String?   @db.VarChar(50)
  jurusan               String?   @db.VarChar(100)
  jabatan               String?   @db.VarChar(100)
  devisi                String?   @db.VarChar(100)
  level                 String?   @db.VarChar(50)
  tgl_masuk_kerja       DateTime?
  tgl_terakhir_kerja    DateTime?
  masa_kerja            String?   @db.VarChar(50)
  status_pkwt           String?   @db.VarChar(50) // PKWT
  no_bpjs_tenaga_kerja  String?   @db.VarChar(50)
  no_nik_ktp            String?   @db.VarChar(20)
  no_bpjs_kesehatan     String?   @db.VarChar(50)
  no_npwp               String?   @db.VarChar(50)
  status_pajak          String?   @db.VarChar(20) // TK/0, TK/1, K/0, K/1, dst.
  no_rekening_bank      String?   @db.VarChar(50)
  perusahaan_sebelumnya String?   @db.VarChar(100)

  // Relationships
  companyId      String?
  company        Company?         @relation(fields: [companyId], references: [id])
  userId         String?          @unique
  user           User?            @relation(fields: [userId], references: [id])
  EmployeeFamily EmployeeFamily[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("karyawan")
}

// Employee Family Model - Keluarga Karyawan (Istri & Anak)
model EmployeeFamily {
  id                String         @id @default(cuid())
  employeeId        String
  employee          Employee       @relation(fields: [employeeId], references: [id_karyawan], onDelete: Cascade)

  nama              String         @db.VarChar(100)
  hubungan          FamilyRelation
  jenis_kelamin     String?        @db.Char(1) // L/P
  tanggal_lahir     DateTime?
  umur              Int?
  no_nik_ktp        String?        @db.VarChar(20)
  no_bpjs_kesehatan String?        @db.VarChar(50)
  no_telp_hp        String?        @db.VarChar(20)

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([employeeId])
  @@map("employee_family")
}

// User Model - Core authentication
model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  password String? // Hashed password for authentication
  role     UserRole  @default(OPERATOR)
  employee Employee?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Supplier TBS Model for PT PKS
model SupplierTBS {
  id           String       @id @default(cuid())
  nomorForm    String? // ex: .../PT.TRT/SUPP-TBS/mm/2024
  typeSupplier SupplierType
  pajakPKP     PajakPKP     @default(NON_PKP)

  // IDENTITAS
  namaPemilik     String
  alamatPemilik   String?
  hpPemilik       String?
  namaPerusahaan  String?
  alamatRampPeron String?
  hpPerusahaan    String?
  bujur           String?
  lintang         String?

  // PROFIL KEBUN - JSON field containing tahunTanam, luasKebun, estimasiSupply
  profilKebun Json?

  // TIPE PENGELOLAAN
  pengelolaanSwadaya    String?
  pengelolaanKelompok   String?
  pengelolaanPerusahaan String?
  jenisBibit            String?
  sertifikasiISPO       Boolean @default(false)
  sertifikasiRSPO       Boolean @default(false)

  // PROFIL IZIN USAHA
  aktePendirian String?
  aktePerubahan String?
  nib           String? @unique
  siup          String?
  npwp          String? @unique

  // PENJUALAN TBS
  penjualanLangsungPKS String?
  penjualanAgen        String?

  // TRANSPORTASI
  transportMilikSendiri Int?
  transportPihak3       Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([typeSupplier])
  @@index([pajakPKP])
}

// Buyer Model for PT PKS - DataMaster Buyer
model Buyer {
  id               String      @id @default(cuid())
  buyerCode        String      @unique
  type             BuyerType   // COMPANY | PERSON
  legalName        String
  tradeName        String?
  npwp             String?     @unique
  pkpStatus        PkpStatus   // NON_PKP | PKP_11 | PKP_1_1
  addressLine      String
  city             String
  province         String
  postalCode       String?
  billingEmail     String
  phone            String
  destinationName  String      // gudang/bulking tujuan
  destinationAddr  String

  status           BuyerStatus @default(VERIFIED) // DRAFT | VERIFIED | INACTIVE
  verifiedAt       DateTime?
  verifiedById     String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  contacts         BuyerContact[]
  docs             BuyerDoc[]

  @@index([type])
  @@index([status])
  @@index([city])
  @@index([province])
}

model BuyerContact {
  id        String  @id @default(cuid())
  buyerId   String
  name      String
  role      String?
  email     String
  phone     String
  isBilling Boolean @default(false)
  buyer     Buyer   @relation(fields: [buyerId], references: [id], onDelete: Cascade)

  @@index([buyerId])
}

model BuyerDoc {
  id        String @id @default(cuid())
  buyerId   String
  kind      String // NPWP | NIB | KTP_PIC | AKTA | ...
  fileUrl   String
  fileName  String
  buyer     Buyer  @relation(fields: [buyerId], references: [id], onDelete: Cascade)

  @@index([buyerId])
}

// Transporter Model for PT PKS - DataMaster Transportir
model Transporter {
  id              String         @id @default(cuid())
  type            TransporterType
  legalName       String
  tradeName       String?
  npwp            String?        @unique
  pkpStatus       PkpStatus      // NON_PKP | PKP_11 | PKP_1_1
  addressLine     String?
  city            String?
  province        String?
  postalCode      String?
  picName         String?
  picPhone        String?
  picEmail        String?
  bankName        String?
  bankAccountNo   String?
  bankAccountNm   String?
  statementUrl    String?        // surat pernyataan (NPWP/rekening)
  isVerified      Boolean        @default(true) // admin input â†’ auto verified
  status          RecordStatus   @default(AKTIF)
  notes           String?

  vehicles        Vehicle[]
  drivers         Driver[]
  tariffs         TransportTariff[]
  contracts       TransportContract[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([legalName])
  @@index([pkpStatus])
  @@index([status])
  @@index([city])
}

model Vehicle {
  id              String     @id @default(cuid())
  transporterId   String
  plateNo         String     @unique
  type            String
  capacityTons    Decimal?   @db.Decimal(10, 2)
  stnkUrl         String?
  stnkValidThru   DateTime?
  kirUrl          String?
  kirValidThru    DateTime?
  gpsId           String?
  photoUrl        String?

  transporter     Transporter @relation(fields: [transporterId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([transporterId])
  @@index([plateNo])
}

model Driver {
  id              String     @id @default(cuid())
  transporterId   String
  name            String
  phone           String?
  nik             String?
  simType         String?
  simUrl          String?
  simValidThru    DateTime?

  transporter     Transporter @relation(fields: [transporterId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([transporterId])
  @@index([name])
}

model TransportTariff {
  id              String     @id @default(cuid())
  transporterId   String
  origin          String     // cluster/kebun/pabrik
  destination     String     // pabrik/SPBE
  commodity       String     // TBS/CPO/Kernel/PKO
  unit            String     // TON/KM/TRIP
  price           Decimal    @db.Decimal(15, 2)
  includeToll     Boolean    @default(false)
  includeUnload   Boolean    @default(false)
  includeTax      Boolean    @default(false)
  notes           String?

  transporter     Transporter @relation(fields: [transporterId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([transporterId, origin, destination, commodity])
}

model TransportContract {
  id              String     @id @default(cuid())
  transporterId   String
  contractNo      String     @unique
  buyerId         String?    // opsional: relasi ke Buyer jika 3 pihak
  commodity       String
  startDate       DateTime?
  endDate         DateTime?
  baseTariffId    String?
  dokUrl          String?

  transporter     Transporter @relation(fields:[transporterId], references:[id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([transporterId])
  @@index([contractNo])
}

// Account Model - Chart of Accounts (Daftar Akun)
model Account {
  id            String        @id @default(cuid())
  companyId     String
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  code          String
  name          String
  class         AccountClass
  normalSide    NormalSide
  isPosting     Boolean       @default(true)
  isCashBank    Boolean       @default(false)
  taxCode       TaxCode       @default(NON_TAX)

  currency      String?       @db.VarChar(10)
  description   String?       @db.VarChar(300)
  status        RecordStatus  @default(AKTIF)

  parentId      String?
  parent        Account?      @relation("AccountHierarchy", fields: [parentId], references: [id])
  children      Account[]     @relation("AccountHierarchy")

  systemAccountMaps SystemAccountMap[]
  openingBalances   OpeningBalance[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([companyId, code])
  @@index([companyId, class])
  @@index([parentId])
}

// SystemAccountMap Model - Mapping akun untuk transaksi otomatis
model SystemAccountMap {
  id         String            @id @default(cuid())
  companyId  String
  company    Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  key        SystemAccountKey
  accountId  String
  account    Account           @relation(fields: [accountId], references: [id], onDelete: Restrict)

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@unique([companyId, key])
  @@index([accountId])
}

// FiscalPeriod Model - Periode fiskal per bulan
model FiscalPeriod {
  id         String    @id @default(cuid())
  companyId  String
  company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  year       Int
  month      Int
  startDate  DateTime
  endDate    DateTime
  isClosed   Boolean   @default(false)

  openingBalances OpeningBalance[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([companyId, year, month])
  @@index([companyId, isClosed])
}

// OpeningBalance Model - Saldo awal akun per periode
model OpeningBalance {
  id          String      @id @default(cuid())
  companyId   String
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  periodId    String
  period      FiscalPeriod @relation(fields: [periodId], references: [id], onDelete: Cascade)

  accountId   String
  account     Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)

  debit       Decimal     @db.Decimal(18,2) @default(0)
  credit      Decimal     @db.Decimal(18,2) @default(0)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([companyId, periodId, accountId])
  @@index([accountId])
}

// ============================================
// MATERIAL INVENTORY MODELS - PT PKS
// ============================================

// Unit (Satuan Barang) Model
model Unit {
  id                 String   @id @default(cuid())
  code               String   @unique
  name               String
  isBase             Boolean  @default(false)
  conversionToBase   Decimal  @db.Decimal(10,4) @default(1.0)
  description        String?  @db.Text
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  itemsAsBase        Item[]   @relation("ItemBaseUnit")
  itemsAsIssue       Item[]   @relation("ItemIssueUnit")
  goodsReceiptLines  GoodsReceiptLine[]
  goodsIssueLines    GoodsIssueLine[]
  itemRequestLines   ItemRequestLine[]

  @@index([name])
}

// Category (Kategori Barang) Model
model Category {
  id          String     @id @default(cuid())
  code        String     @unique
  name        String
  description String?    @db.Text
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  itemTypes   ItemType[]
  items       Item[]

  @@index([name])
}

// ItemType (Jenis Barang) Model
model ItemType {
  id          String   @id @default(cuid())
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  code        String
  name        String
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items       Item[]

  @@unique([categoryId, code])
  @@index([categoryId])
  @@index([name])
}

// Warehouse (Gudang) Model
model Warehouse {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  address     String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bins            Bin[]
  stockBalances   StockBalance[]
  stockLedgers    StockLedger[]
  goodsReceipts   GoodsReceipt[]
  goodsIssues     GoodsIssue[]

  @@index([name])
}

// Bin (Lokasi Rak/Bin di Gudang) Model
model Bin {
  id          String    @id @default(cuid())
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  code        String
  name        String
  description String?   @db.Text
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  stockBalances StockBalance[]
  stockLedgers  StockLedger[]

  @@unique([warehouseId, code])
  @@index([warehouseId])
}

// Item (Barang/Material) Model
model Item {
  id                  String   @id @default(cuid())
  sku                 String   @unique
  name                String
  description         String?  @db.Text
  categoryId          String
  category            Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  itemTypeId          String
  itemType            ItemType @relation(fields: [itemTypeId], references: [id], onDelete: Restrict)
  baseUnitId          String
  baseUnit            Unit     @relation("ItemBaseUnit", fields: [baseUnitId], references: [id], onDelete: Restrict)
  defaultIssueUnitId  String?
  defaultIssueUnit    Unit?    @relation("ItemIssueUnit", fields: [defaultIssueUnitId], references: [id], onDelete: Restrict)
  valuationMethod     String   @default("AVERAGE") // AVERAGE or FIFO
  minStock            Decimal? @db.Decimal(18,4)
  maxStock            Decimal? @db.Decimal(18,4)
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  stockBalances     StockBalance[]
  stockLedgers      StockLedger[]
  goodsReceiptLines GoodsReceiptLine[]
  goodsIssueLines   GoodsIssueLine[]
  itemRequestLines  ItemRequestLine[]

  @@index([name])
  @@index([sku])
  @@index([categoryId])
  @@index([itemTypeId])
}

// StockBalance (Saldo Stok) Model
model StockBalance {
  id          String    @id @default(cuid())
  itemId      String
  item        Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  binId       String?
  bin         Bin?      @relation(fields: [binId], references: [id], onDelete: SetNull)
  qtyOnHand   Decimal   @db.Decimal(18,4) @default(0)
  avgCost     Decimal   @db.Decimal(18,4) @default(0)
  updatedAt   DateTime  @updatedAt

  @@unique([itemId, warehouseId, binId])
  @@index([itemId])
  @@index([warehouseId])
}

// StockLedger (Kartu Stok) Model
model StockLedger {
  id            String    @id @default(cuid())
  ts            DateTime  @default(now())
  itemId        String
  item          Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  warehouseId   String
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  binId         String?
  bin           Bin?      @relation(fields: [binId], references: [id], onDelete: SetNull)
  referenceType String    // IN|OUT|ADJ
  referenceId   String
  qtyDelta      Decimal   @db.Decimal(18,4) // + for IN, - for OUT (in base unit)
  unitCost      Decimal?  @db.Decimal(18,4) // for average valuation updates
  note          String?   @db.Text
  createdById   String
  createdAt     DateTime  @default(now())

  @@index([itemId])
  @@index([warehouseId])
  @@index([referenceType])
  @@index([ts])
}

// GoodsReceipt (Barang Masuk) Model
model GoodsReceipt {
  id          String    @id @default(cuid())
  docNumber   String    @unique
  date        DateTime
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Restrict)
  sourceType  String    // PURCHASE|RETURN|PRODUCTION|OTHER
  sourceRef   String?
  note        String?   @db.Text
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  lines       GoodsReceiptLine[]

  @@index([date])
  @@index([warehouseId])
}

// GoodsReceiptLine (Detail Barang Masuk) Model
model GoodsReceiptLine {
  id          String       @id @default(cuid())
  receiptId   String
  receipt     GoodsReceipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  itemId      String
  item        Item         @relation(fields: [itemId], references: [id], onDelete: Restrict)
  unitId      String
  unit        Unit         @relation(fields: [unitId], references: [id], onDelete: Restrict)
  qty         Decimal      @db.Decimal(18,4)
  unitCost    Decimal?     @db.Decimal(18,4)
  note        String?      @db.Text

  @@index([receiptId])
  @@index([itemId])
}

// GoodsIssue (Barang Keluar) Model
model GoodsIssue {
  id          String    @id @default(cuid())
  docNumber   String    @unique
  date        DateTime
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Restrict)
  purpose     String    // ISSUE|LOAN|PROD|SCRAP
  targetDept  String?
  note        String?   @db.Text
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  lines       GoodsIssueLine[]

  @@index([date])
  @@index([warehouseId])
}

// GoodsIssueLine (Detail Barang Keluar) Model
model GoodsIssueLine {
  id        String     @id @default(cuid())
  issueId   String
  issue     GoodsIssue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  itemId    String
  item      Item       @relation(fields: [itemId], references: [id], onDelete: Restrict)
  unitId    String
  unit      Unit       @relation(fields: [unitId], references: [id], onDelete: Restrict)
  qty       Decimal    @db.Decimal(18,4)
  note      String?    @db.Text

  @@index([issueId])
  @@index([itemId])
}

// ItemRequest (Pengajuan Barang) Model
model ItemRequest {
  id             String   @id @default(cuid())
  reqNumber      String   @unique
  date           DateTime
  requestDept    String
  reason         String?  @db.Text
  status         String   @default("DRAFT") // DRAFT|PENDING|APPROVED|REJECTED|FULFILLED|NEED_FUND
  relatedFunding String?
  createdById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  lines          ItemRequestLine[]

  @@index([date])
  @@index([status])
}

// ItemRequestLine (Detail Pengajuan Barang) Model
model ItemRequestLine {
  id         String      @id @default(cuid())
  requestId  String
  request    ItemRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  itemId     String
  item       Item        @relation(fields: [itemId], references: [id], onDelete: Restrict)
  unitId     String
  unit       Unit        @relation(fields: [unitId], references: [id], onDelete: Restrict)
  qty        Decimal     @db.Decimal(18,4)

  @@index([requestId])
  @@index([itemId])
}
